<crap_result>
  <project>
    C:\Users\Cobalt\workspace\scjp
  </project>
  <project_id>
    1255902192079
  </project_id>
  <timestamp>
    2009.10.18. 23:44
  </timestamp>
  <classDirectories>
    <classDirectory>
      C:\Users\Cobalt\workspace\scjp\bin
    </classDirectory>
  </classDirectories>
  <testClassDirectories>
    <testClassDirectory>
      C:\Users\Cobalt\workspace\scjp\bin
    </testClassDirectory>
  </testClassDirectories>
  <sourceDirectories>
    <sourceDirectory>
      C:\Users\Cobalt\workspace\scjp\src
    </sourceDirectory>
  </sourceDirectories>
  <libClasspaths>
    <libClasspath>
      E:\scjp
    </libClasspath>
  </libClasspaths>
  <stats>
    <name>
      Method Crap Stats
    </name>
    <totalCrap>
      540,00
    </totalCrap>
    <crap>
      5,09
    </crap>
    <median>
      2,00
    </median>
    <average>
      5,09
    </average>
    <stdDev>
      10,95
    </stdDev>
    <methodCount>
      106
    </methodCount>
    <crapMethodCount>
      6
    </crapMethodCount>
    <crapMethodPercent>
      5,66
    </crapMethodPercent>
    <crapLoad>
      37
    </crapLoad>
    <crapThreshold>
      30
    </crapThreshold>
    <globalAverage>
      -1,00
    </globalAverage>
    <globalCraploadAverage>
      -1,00
    </globalCraploadAverage>
    <globalCrapMethodAverage>
      -1,00
    </globalCrapMethodAverage>
    <globalTotalMethodAverage>
      -1,00
    </globalTotalMethodAverage>
    <globalAverageDiff>
      6,09
    </globalAverageDiff>
    <globalCraploadAverageDiff>
      38,00
    </globalCraploadAverageDiff>
    <globalCrapMethodAverageDiff>
      7,00
    </globalCrapMethodAverageDiff>
    <globalTotalMethodAverageDiff>
      107,00
    </globalTotalMethodAverageDiff>
    <shareStatsUrl>
      http://www.crap4j.org/benchmark/stats/new?stat[project_hash]=1255902192079&amp;stat[project_url]=scjp&amp;stat[crap]=5.66&amp;stat[crap_load]=37&amp;stat[crap_methods]=6&amp;stat[total_methods]=106&amp;stat[ones]=0&amp;stat[twos]=90&amp;stat[fours]=7&amp;stat[eights]=2&amp;stat[sixteens]=4&amp;stat[thirtytwos]=2&amp;stat[sixtyfours]=1&amp;stat[one28s]=0&amp;stat[two56s]=0
    </shareStatsUrl>
    <histogram>
      <hist>
        <place>
          one
        </place>
        <value>
          0
        </value>
        <height>
          0,00px
        </height>
      </hist>
      <hist>
        <place>
          two
        </place>
        <value>
          90
        </value>
        <height>
          170,00px
        </height>
      </hist>
      <hist>
        <place>
          four
        </place>
        <value>
          7
        </value>
        <height>
          28,00px
        </height>
      </hist>
      <hist>
        <place>
          eight
        </place>
        <value>
          2
        </value>
        <height>
          28,00px
        </height>
      </hist>
      <hist>
        <place>
          sixteen
        </place>
        <value>
          4
        </value>
        <height>
          28,00px
        </height>
      </hist>
      <hist>
        <place>
          thirtytwo
        </place>
        <value>
          2
        </value>
        <height>
          28,00px
        </height>
      </hist>
      <hist>
        <place>
          sixtyfour
        </place>
        <value>
          1
        </value>
        <height>
          28,00px
        </height>
      </hist>
      <hist>
        <place>
          one28
        </place>
        <value>
          0
        </value>
        <height>
          0,00px
        </height>
      </hist>
      <hist>
        <place>
          two56
        </place>
        <value>
          0
        </value>
        <height>
          0,00px
        </height>
      </hist>
    </histogram>
  </stats>
  <methods>
    <method>
      <package>
        
      </package>
      <className>
        A
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        AA
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        AA
      </className>
      <methodName>
        m
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void m()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Alpha
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Animal
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        B
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Berta
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Berta
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Berta
      </className>
      <methodName>
        doStuff
      </methodName>
      <methodSignature>
        (Ljava/lang/Long;)V
      </methodSignature>
      <fullMethod>
        static  void doStuff(java.lang.Long)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Berta
      </className>
      <methodName>
        doStuff
      </methodName>
      <methodSignature>
        (Ljava/lang/Object;)V
      </methodSignature>
      <fullMethod>
        static  void doStuff(java.lang.Object)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Berta
      </className>
      <methodName>
        doStuff
      </methodName>
      <methodSignature>
        ([Ljava/lang/Integer;)V
      </methodSignature>
      <fullMethod>
        static  void doStuff(java.lang.Integer[])
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Berta
      </className>
      <methodName>
        doStuff
      </methodName>
      <methodSignature>
        ([Ljava/lang/Object;)V
      </methodSignature>
      <fullMethod>
        static  void doStuff(java.lang.Object[])
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Berta
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Beta
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Bird
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Boat
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Bottom2
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Bridge$Suites$1
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;II)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(java.lang.String, int, int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Bridge$Suites$1
      </className>
      <methodName>
        getValue
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        public  int getValue(int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Bridge$Suites
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Bridge$Suites
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;II)V
      </methodSignature>
      <fullMethod>
        private  void &lt;init&gt;(java.lang.String, int, int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Bridge$Suites
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;IILBridge$Suites;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(java.lang.String, int, int, Bridge$Suites)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Bridge$Suites
      </className>
      <methodName>
        access$3
      </methodName>
      <methodSignature>
        (LBridge$Suites;)I
      </methodSignature>
      <fullMethod>
        static  int access$3(Bridge$Suites)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Bridge$Suites
      </className>
      <methodName>
        getValue
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        public  int getValue(int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Bridge$Suites
      </className>
      <methodName>
        valueOf
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)LBridge$Suites;
      </methodSignature>
      <fullMethod>
        public static  Bridge$Suites valueOf(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Bridge$Suites
      </className>
      <methodName>
        values
      </methodName>
      <methodSignature>
        ()[LBridge$Suites;
      </methodSignature>
      <fullMethod>
        public static  Bridge$Suites[] values()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Bridge
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Bridge
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Cat
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        ComingThru
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        ComingThru
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        ComingThru
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        ComingThru
      </className>
      <methodName>
        sifter
      </methodName>
      <methodSignature>
        (Ljava/lang/Object;)V
      </methodSignature>
      <fullMethod>
        static  void sifter(java.lang.Object)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        ComingThru
      </className>
      <methodName>
        sifter
      </methodName>
      <methodSignature>
        ([LB;)V
      </methodSignature>
      <fullMethod>
        static  void sifter(B[])
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        ComingThru
      </className>
      <methodName>
        sifter
      </methodName>
      <methodSignature>
        ([[LA;)V
      </methodSignature>
      <fullMethod>
        static  void sifter(A[][])
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        ComingThru
      </className>
      <methodName>
        sifter
      </methodName>
      <methodSignature>
        ([[LB;)V
      </methodSignature>
      <fullMethod>
        static  void sifter(B[][])
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Comp2
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        DoFormat
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        DoFormat
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Dog
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Ebb
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Ebb
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Feline
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Feline
      </className>
      <methodName>
        foo
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        static  java.lang.String foo()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Feline
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Gamma
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Gamma
      </className>
      <methodName>
        go
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void go()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Gamma
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Hawk
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Hawk
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Mutate
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        MyException
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Numbers
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Parser
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Parser
      </className>
      <methodName>
        getInt
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)I
      </methodSignature>
      <fullMethod>
         int getInt(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Parser
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Raptor
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Raptor
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Regex2
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Retread
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Retread
      </className>
      <methodName>
        doStuff
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void doStuff()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Retread
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Slice
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Slice
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Speedboat
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Spock
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Steepper$Roman
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Steepper$Roman
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;I)V
      </methodSignature>
      <fullMethod>
        private  void &lt;init&gt;(java.lang.String, int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Steepper$Roman
      </className>
      <methodName>
        valueOf
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)LSteepper$Roman;
      </methodSignature>
      <fullMethod>
        public static  Steepper$Roman valueOf(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Steepper$Roman
      </className>
      <methodName>
        values
      </methodName>
      <methodSignature>
        ()[LSteepper$Roman;
      </methodSignature>
      <fullMethod>
        public static  Steepper$Roman[] values()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Steepper
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        TKO
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Test
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Test3
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        TestInners$1AA
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (LTestInners;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(TestInners)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        TestInners$1AA
      </className>
      <methodName>
        m
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void m()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        TestInners$AA
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (LTestInners;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(TestInners)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        TestInners$AA
      </className>
      <methodName>
        m
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void m()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        TestInners
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        TestInners
      </className>
      <methodName>
        go
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void go()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        TestInners
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Tire
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Tire
      </className>
      <methodName>
        doStuff
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void doStuff()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Top
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Tree
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Utils
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Utils
      </className>
      <methodName>
        getInt
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)I
      </methodSignature>
      <fullMethod>
         int getInt(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Vet
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Vet
      </className>
      <methodName>
        goWalk
      </methodName>
      <methodSignature>
        (LDog;)V
      </methodSignature>
      <fullMethod>
        static  void goWalk(Dog)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Zeta
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Mutate
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Numbers
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ([I)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(int[])
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Numbers
      </className>
      <methodName>
        negate
      </methodName>
      <methodSignature>
        ()LNumbers;
      </methodSignature>
      <fullMethod>
        public  Numbers negate()
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Numbers
      </className>
      <methodName>
        show
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void show()
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Regex2
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Steepper
      </className>
      <methodName>
        $SWITCH_TABLE$Steepper$Roman
      </methodName>
      <methodSignature>
        ()[I
      </methodSignature>
      <fullMethod>
        static  int[] $SWITCH_TABLE$Steepper$Roman()
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Vet
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Spock
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        12,00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Test
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        12,00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Comp2
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        20,00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        TKO
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        30,00
      </crap>
      <complexity>
        5
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        5
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Test3
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        30,00
      </crap>
      <complexity>
        5
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        5
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Tree
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        30,00
      </crap>
      <complexity>
        5
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        5
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Steepper
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        56,00
      </crap>
      <complexity>
        7
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        7
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Zeta
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        56,00
      </crap>
      <complexity>
        7
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        7
      </crapLoad>
    </method>
    <method>
      <package>
        
      </package>
      <className>
        Ebb
      </className>
      <methodName>
        main
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void main(java.lang.String[])
      </fullMethod>
      <crap>
        72,00
      </crap>
      <complexity>
        8
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        8
      </crapLoad>
    </method>
  </methods>
</crap_result>
